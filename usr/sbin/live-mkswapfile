#!/bin/bash

. /usr/lib/live-swapfile/functions.sh

# the recommended size of the swap file
RECOMMENDED=1024

# the temporary file to use for dialog outputs
TMP=/tmp/live_swapfile.tmp

# gettext support
. gettext.sh
export TEXTDOMAIN=live-swapfile

get_memory_info

get_writable_partition ()
{
	declare -A CANDIDATE_KEYS=( ["00"]="fixed_ssd" ["01"]="fixed_hdd" ["10"]="removable_ssd" ["11"]="removable_hdd" )
	declare -A CANDIDATE_FREE=( ["fixed_ssd"]="0" ["fixed_hdd"]="0" ["removable_ssd"]="0" ["removable_hdd"]="0" )
	declare -A CANDIDATE_PARTITION

	echo "" >> ${LOGFILE}
	echo "getting list of writable partitions" >> ${LOGFILE}
	unset PARTITION
	for DEVICE in $(blkid -o device | grep -vE "/(loop|ram|dm-|fd)")
	do
		echo "checking device ${DEVICE}" >> ${LOGFILE}

		# determine mount point of device
		get_mount_point "${DEVICE}"
		if [ -z "${MOUNTPOINT}" ]
		then
			# mounting device failed
			echo " ERROR: could not mount ${DEVICE}" >> ${LOGFILE}
			continue
		fi
		echo " ${DEVICE} is mounted on ${MOUNTPOINT}" >> ${LOGFILE}

		# check writability
		if [ -w "${MOUNTPOINT}" ]
		then
			echo " ${MOUNTPOINT} is writable" >> ${LOGFILE}
			# add some info about device
			get_device_info ${DEVICE}

			KEY="${CANDIDATE_KEYS["${IS_REMOVABLE}${IS_ROTATIONAL}"]}"

			if [ "${FREE}" -gt "${CANDIDATE_FREE["$KEY"]}" ]; then
				echo " Updating ${KEY} with ${DEVICE} (${FREE} free)"
				CANDIDATE_FREE["$KEY"]="${FREE}"
				CANDIDATE_PARTITION["$KEY"]="${DEVICE}"
			fi
		else
			echo " ERROR: ${MOUNTPOINT} is not writable" >> ${LOGFILE}
		fi

		# cleanup
		if [ -n "${UMOUNT}" ]
		then
			umount ${DEVICE}
		fi
	done

	# Go through candidates in preferred order and select the first with at
	# least $RECOMMENDED free space.
	unset PARTITION
	for key in ${CANDIDATE_KEYS[@]}; do
		if [ -z "$PARTITION" \
		     -a -n "${CANDIDATE_PARTITION["$key"]}" \
		     -a "${CANDIDATE_FREE["$key"]}" -gt "$RECOMMENDED" ]
		then
			PARTITION="${CANDIDATE_PARTITION["$key"]}"
		fi
	done

	echo " Selected partition ${PARTITION}"
}

select_swap_partition() {
	get_writable_partition

	# error handling in case of no usable partitions
	if [ -z "${PARTITION}" ]
	then
		dialog \
			--backtitle "$(eval_gettext "RAM: \${MEM_TOTAL_MB} MB, Swap: \${SWP_TOTAL_MB} MB")" \
			--title "$(gettext "Error")" \
			--yes-label "$(gettext "Rescan")" \
			--no-label "$(gettext "Cancel")" \
			--yesno "$(gettext "No usable partitions for creating a swap file found.\n\nYou may now plug in removable devices like USB hard drives or USB flash drives and rescan for usable partitions.")" \
			10 60
		if [ $? -eq 0 ]
		then
			# yes, retry
			select_swap_partition
		else
			# no, exit
			exit 1
		fi
	fi
}

select_swap_partition

if [ -z "${PARTITION}" ]; then
	# No swap partition
	exit 1
fi

# Ask the user if we should proceed.
dialog \
	--backtitle "$(eval_gettext "RAM: \${MEM_TOTAL_MB} MB, Swap: \${SWP_TOTAL_MB} MB")" \
	--title "$(gettext "Create swap on ${PARTITION}?")" \
	--yes-label "$(gettext "Yes")" \
	--no-label "$(gettext "Skip")" \
	--yesno "$(gettext "Available memory is low.\n\nSetup swap space? (recommended).")" \
	10 60
if [ $? -ne 0 ]
then
	# no, exit
	exit 1
fi

# warn if the selected PARTITION is a removable device
get_device_info ${PARTITION}
if [ "$IS_REMOVABLE" = "1" ]; then
	dialog \
		--backtitle "$(eval_gettext "RAM: \${MEM_TOTAL_MB} MB, Swap: \${SWP_TOTAL_MB} MB")" \
		--title "$(gettext "${PARTITION} is removable")" \
		--msgbox "$(gettext "Selected device ${PARTITION} is removable.\n\nPlease do not remove this device until the system is shut down.")" \
		10 60
fi

# mount selected partition
get_mount_point ${PARTITION}
if [ -z "${MOUNTPOINT}" ]; then
	# mounting failed
	dialog \
		--backtitle "$(eval_gettext "RAM: \${MEM_TOTAL_MB} MB, Swap: \${SWP_TOTAL_MB} MB")" \
		--title "$(gettext "Error")" \
		--msgbox "$(eval_gettext "Mounting of \${PARTITION} failed.")" \
		7 47
	exit 1
fi


NAME=swapspace
DAEMON="/usr/sbin/$NAME"
PIDFILE="/var/run/$NAME.pid"
CONFIG="/etc/$NAME.conf"
PIDOPT="--pidfile $PIDFILE"
DAEMON_ARGS="-d -p -c ${CONFIG}"
STDOPTS="--quiet $PIDOPT"
SWAPPATH="${MOUNTPOINT}/live.swapspace"

# Create swap directory
mkdir -p "$SWAPPATH"
if [ ! -d "$SWAPPATH" ]; then
	# failed to create directory
	dialog \
		--backtitle "$(eval_gettext "RAM: \${MEM_TOTAL_MB} MB, Swap: \${SWP_TOTAL_MB} MB")" \
		--title "$(gettext "Error")" \
		--msgbox "$(eval_gettext "Could not create directory \${SWAPPATH}.")" \
		7 47
	exit 1
fi

RUNNING_PID=$(pidof $DAEMON)
if [ -n "$RUNNING_PID" ]; then
	kill $RUNNING_PID
	sleep 5
	kill -9 $RUNNING_PID
fi

# create swapspace config
cat > ${CONFIG} <<EOF
swappath="${SWAPPATH}"
EOF

# start swapspace daemon
start-stop-daemon --start --oknodo --exec $DAEMON $STDOPTS -- $DAEMON_ARGS
if [ $? -ne 0 ]; then
	# Failed to start swapspace daemon
	dialog \
		--backtitle "$(eval_gettext "RAM: \${MEM_TOTAL_MB} MB, Swap: \${SWP_TOTAL_MB} MB")" \
		--title "$(gettext "Error")" \
		--msgbox "$(eval_gettext "Failed to start swapspace daemon.")" \
		7 47
	exit 1
fi

get_memory_info
